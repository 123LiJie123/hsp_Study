- 请看下面的问题
    1、根据配置文件 re.properties 指定信息，创建对象并调用方法
        classfullpath = com.hspedu.Cat
        method = hi
        :使用现有技术，能做吗？

    2、 这样的需求在学习框架时特别多，即通过外部文件配置，在不修改源码情况下，来控制程序，也符合设计模式ocp(开闭原则：不修改源码，扩容功能)原则（开闭原则）


    3、快速入门ReflectionQuestion.java
    (1) 加载类，获得一个Class类型的对象             Class.forName(<加载类的全路径>)
    (2)通过Class类型的对象创建得到加载类对象        <加载类Class对象>.newInstance()
    (3)通过Class类型的对象得到加载类的某个方法对象  <加载类Class对象>.getMethod(方法名的String对象)
    (4)通过方法对象调用方法                        <方法对象名>.invoke(<加载类Class对象>)

- Java Reflection 反射机制
    1、反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息（比如成员变量，构造器，成员方法等等），并能操作对象的
    属性及构造器，成员方法等等），并能操作对象的属性及方法。反射在设计模式和框架底层都会用到

    2、加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个Class对象），
    这个对象包含了类的完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，形象的称之为：反射。

    - 反射机制可以完成

        1、在运行时判断任意一个对象所属的类
        2、在运行时构造任意一个类的对象
        3、在运行时得到任意一个类所具有的成员变量和方法
        4、在运行时调用任意一个对象的成员变量和方法
        5、生成动态代理

    - 反射相关的主要类
        1、java.lang.Class：代表一个类，Class对象表示某个类加载后在堆中的对象
        2、java.lang.reflect.Method：代表类的方法
        3、java.lang.reflect.Field：代表类的成员变量
        4、java.lang.reflect.Constructor:代表类的构造方法
- 请看下面的问题
    1、根据配置文件 re.properties 指定信息，创建对象并调用方法
        classfullpath = com.hspedu.Cat
        method = hi
        :使用现有技术，能做吗？

    2、 这样的需求在学习框架时特别多，即通过外部文件配置，在不修改源码情况下，来控制程序，也符合设计模式ocp(开闭原则：不修改源码，扩容功能)原则（开闭原则）


    3、快速入门ReflectionQuestion.java
    (1) 加载类，获得一个Class类型的对象             Class.forName(<加载类的全路径>)
    (2)通过Class类型的对象创建得到加载类对象        <加载类Class对象>.newInstance()
    (3)通过Class类型的对象得到加载类的某个方法对象  <加载类Class对象>.getMethod(方法名的String对象)
    (4)通过方法对象调用方法                        <方法对象名>.invoke(<加载类Class对象>)

    - Java Reflection 反射机制
            1、反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息（比如成员变量，构造器，成员方法等等），并能操作对象的
            属性及构造器，成员方法等等），并能操作对象的属性及方法。反射在设计模式和框架底层都会用到

            2、加载完类之后，在堆中就产生了一个Class类型的对象（一个类只有一个Class对象），
            这个对象包含了类的完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，形象的称之为：反射。

            - 反射机制可以完成

                1、在运行时判断任意一个对象所属的类
                2、在运行时构造任意一个类的对象
                3、在运行时得到任意一个类所具有的成员变量和方法
                4、在运行时调用任意一个对象的成员变量和方法
                5、生成动态代理

            - 反射相关的主要类【Reflection01.java】
                1、java.lang.Class：代表一个类，Class对象表示某个类加载后在堆中的对象
                2、java.lang.reflect.Method：代表类的方法
                3、java.lang.reflect.Field：代表类的成员变量
                4、java.lang.reflect.Constructor:代表类的构造方法

            - 反射优点和缺点
                1、优点：可以动态的创建和使用对象（也是框架底层核心），使用灵活，没有反射机制，框架技术就失去底层支撑。
                2、缺点：使用反射基本是解释执行，对执行速度有影响
                3、应用实例：Reflection02.java

            - 反射调用优化-关闭访问检查
                1、Method和Field、Constructor对象都有setAccessible()方法
                2、setAccessible作用是启动和禁用访问安全检查的开关
                3、参数值为true表示 反射的对象在使用时取消访问检查，提高反射的效率。参数值为false则表示反射的对象执行访问检查

    - Class类：
            - 基本介绍：
                1、Class也是类，因此也继承Object类
                2、Class类对象不是new出来的，而是系统创建的
                3、对于某个类的Class类对象，在内存中只有一份，因此类只加载一次
                4、每个类的实例都会记得自己是由哪个Class实例所生成
                5、通过Class可以完整地得到一个类的完整结构，通过一系列API
                6、Class对象是存放在堆的
                7、类的字节码二进制数据，是放在方法区的，有的地方称为类的元数据（包括方法代码，变量名，方法名，访问权限等）

            - Class类的常用方法 【Class02.java】


            - 类加载
                反射机制是java实现动态语言的关键，也就是通过反射实现类动态加载。
                    1、静态加载：编译时加载相关的类，如果没有则报错，依赖性太强
                    2、动态加载：运行加载需要的类，如果运行时不用该类，则不报错，降低了依赖性
                    3、举例说明

             - 类加载时机
                    1、当创建对象时(new)  //静态加载
                    2、当子类被加载时，父类也加载    //静态加载
                    3、调用类中的静态成员时   //静态加载
                    4、通过反射   //动态加载


    - 通过反射获取类的结构信息
        第一组：java.lang.Class类  【ReflectionUtils.java】
            1. getName:获取全类名
            2.getSimpleName:获取简单类名
            3. getFields:获取所有public修饰的属性，包含本类以及父类的4.getDeclaredFields:获取本类中所有属性
            5. getMethods:获取所有public修饰的方法，包含本类以及父类
            6. getDeclaredMethods:获取本类中所有方法
            7. getConstructors:获取本类所有public修饰的构造器
            8. getDeclaredConstructors:获取本类中所有构造器
            9. getPackage:以Package形式返回包信息
            10.getSuperClass:以Class形式返回父类信息
            11.getinterfaces:以Class[]形式返回接口信息
            12.getAnnotations:以Annotation[] 形式返回注解信息



        第二组：java.lang.reflect.Field类
            1.getModifiers:以int形式返回修饰符
            [说明:默认修饰符是0，public是1 ，private是2，protected是4，static是8, final是16, public(1) + static (8)=9
            2.getType:以Class形式返回类型
            3. getName:;返回属性名


     - 通过反射创建对象

            1、方式一：
                调用类中的public修饰的无参构造器

            2、方式二:
                调用类中的指定构造器

            3、Class类相关方法
                newInstance：调用类中的无参构造器，获取对应类的对象
                getConstructor(Class...clazz)：根据参数列表，获取对应的public构造器对象
                getDecalaredConstructor(Class...clazz)：根据参数列表，获取对应的构造器对象


            4、Constructor类相关方法
            setAccessible：暴破
            newInstance(Object...obj)：调用构造器

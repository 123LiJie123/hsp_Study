1、equals方法
== 和 equals的对比（equals_.Equals01.java）
（1）==：既可以判断基本类型，又可以判断引用类型
（2）==：如果判断基本类型，判断的值是否相等。示例：int i = 10; double d = 10.0;
（3）==：如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象
（4）equals:是Object类中的方法，只能判断引用类型
（5）默认判断是地址是否相等，子类中往往重写该方法，
    用于判断内容是否相等。
2、hashCode方法
（1）提高具有哈希结构的容器的效率！（比如HashMap、Hashtable、LinkedHashMap等）
（2）两个引用，如果指向的是同一个对象，则哈希值肯定是一样的！
（3）两个引用，如果指向的是不同对象，则哈希值是不一样的
（4）哈希值主要根据地址号来的！不能完全将哈希值等价于地址。
（5）案例演示[HashCode_.java]:obj.hashCode()[测试：A obj1 = new A()；
A obj2 =  new A();A obj3 = obj1]
（6）后面在集合中hashCode如果需要的话，也会重写。

3、finalize方法（看Finalize_.java）
（1）当对象被回收时，系统自动调用该对象的finalize方法。子类可以重写该
方法，做一些释放资源的操作
（2）什么时候被回收：当某个对象没有任何引用时，则jvm就认为这个对象是一个垃圾
对象，就会使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用finalize方法。
（3）垃圾回收机制的调用，是由系统来决定，也可以通过System.gc()主动触发垃圾回收
机制。
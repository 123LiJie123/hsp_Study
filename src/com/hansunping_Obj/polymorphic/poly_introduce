多态（多种状态）基本介绍
-- 方法或对象具有多种形态。是面向对象的第三大特征，多态是建立在封装和继承基础之上的。
多态的具体体现

--多态的具体体现
1、方法的多态 PloyMethod.java
  重写和重载就体现多态
2、对象的多态（核心、重难点）
    重要的几句话：
            (1) 一个对象的编译类型和运行类型可以不一致
            (2) 编译类型在定义对象时，就确定了，不能改变
            (3)运行类型是可以变化的。
            (4)编译类型看定义时 = 号的左边，运行类型看 = 号的 右边
            案例com.hansunping.objpoly_: PolyObject.java
            Animal animal = new Dog();  【animal 编译类型是Animal，运行类型是Dog】
            animal = new Cat();【animal的运行类型变成了Cat,编译类型仍然是Animal】



    多态的注意事项和细节讨论
    1、多态的前提是：两个对象（类）存在继承关系
    2、多态的向上转型
    （1）本质：父类的引用指向了子类的对象
    （2）语法：父类类型 引用名 = new 子类类型();
    （3）特点：编译类型看左边，运行类型看右边。
         可以调用父类中的所有成员（需遵守访问权限），
         不能调用子类中特有成员；（因为在编译阶段，能调用哪些成员，是由编译类型来决定的）
         最终运行效果看子类的具体实现！

    3、多态的向下转型
    (1)语法：子类类型  引用名 = （子类类型）父类引用；
    (2)只能强转父类的引用， 不能强转父类的对象
    (3)要求父类的引用必须指向的是当前目标类型的对象
    (4)可以调用子类类型中所有成员

    4、属性没有重写之说！属性的值看编译类型（看PolyDetail01.java）
    5、instanceOf比较操作符，用于判断对象的运行类型是否为某个类型或某个子类型。如果运行类型和被比较的类没有任何关系则无法编译(看PolyDetail02.java)
    6、java的动态绑定机制（重要！重要！重要！）  (看dynamic.DynamicBinding.java)
    （1）当调用对象方法的时候，该方法会和该对象的内存地址/运行类型绑定
    （2）当调用对象属性时，没有动态绑定机制，哪里声明哪里使用。

    7、多态的应用
    （1）多态数组  PloyArray.java
        数组的定义类型为父类类型，里面保存的实际元素类型为子类类型
    （2）多态参数
        方法定义的形参类型为父类类型，实参类型允许为子类类型
        应用实例1：前面的主人喂动物
        应用实例2：polyparameter.PolyParameter.java
        定义员工类Employee,包含姓名和月工资[private]，以及计算年工资getAnnual的方法。普通员工
        和经理继承了员工，经理类多了奖金bonus属性和管理manage方法，普通员工多了work方法，普通员工
        和经理类要求分别重写getAnnual方法

        测试类中添加一个方法showEmpAnnal(Employee e),实现获取任何员工对象的年工资，并在main方法中调用
        该方法[e.getAnnual()]

        测试类中添加一个方法，testWork，如果是普通员工，则调用work方法，如果是经理，则调用manage方法。

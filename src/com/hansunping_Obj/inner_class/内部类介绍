基本介绍

一个类的内部又完整的嵌套了另一个类结构。被嵌套的类称为内部类（inner class）,嵌套其他类的类称为外部类（out class）。是我们类的第五大
成员【思考:类的五大成员是哪些？[属性、方法、构造器、代码块、内部类]】，内部类最大的特点就是可以直接访问私有属性，并且可以体现类与类之间的包含关系。


内部类的分类
1、定义在外部类局部位置上（比如方法内）：
（1）局部内部类（有类名）
（2）匿名内部类（没有类名，重点）
2、定义在外部类的成员位置上：
（1）成员内部类（没用static修饰）
（2）静态内部类（使用static修饰）

一、局部内部类的使用LocalInnerClass.java
说明：局部内部类是定义在外部类的局部位置，通常在方法中，并且有类名。
1、可以直接访问外部类的成员，包含私有的
2、不能添加访问修饰符，因为它的地位就是一个局部变量。局部变量是不能使用修饰符的。但是可以使用final修饰，因为局部变量也可以使用final
3、作用域：仅仅在定义它的方法或代码块中。
4、局部内部类---访问---->外部类的成员[访问方式：直接访问]（局部内部类可以直接访问外部类的成员）
5、外部类---访问--->局部内部类的成员（外部类在方法中，可以创建Inner02对象，然后调用方法即可）
    访问方式：创建对象，再访问（注意：必须在作用域内）

6、外部其他类---不能访问---->局部内部类（因为局部内部类地位是一个局部变量）

7、如果外部类和局部内部类的成员重名时，默认遵循就近原则 ，如果想访问外部成员，则可以使用（外部类名.this.成员）去访问

二、匿名内部类的使用
    （1）本质是类（2）内部类（3）该类没有名字（4）同时还是一个对象
    说明：匿名内部类是定义在外部类的局部位置，比如方法中，并且没有类名
    1、匿名内部类的基本语法AnonymousInnerClass.java
    new 类或接口（参数列表）{
        类体
            };
        匿名内部类的语法比较奇特，因为匿名内部类既是一个类的定义，同时它本身也是一个对象，因此从语法上看，它
        既有定义类的特征，也有创建对象的特征。

     3、可以直接访问外部类的所有成员，包含私有的
     4、不能添加访问修饰符，因为它的地位就是一个局部变量。
     5、作用域：仅仅在定义它的方法或代码块中。
     6、匿名内部类---->访问----->外部类成员
     7、外部其他类----不能访问---->匿名内部类（因为 匿名内部类地位是一个局部变量）
     8、如果外部类和局部内部类的成员重名时，默认遵循就近原则 ，如果想访问外部成员，则可以使用（外部类名.this.成员）去访问
   匿名内部类的最佳实践
    1、当做实参直接传递，简洁高效。（InnerClassExercise01.java）


三、成员内部类的使用
    MemberInnerClass01.java
   说明：成员内部类是定义在外部类的成员位置，并且没有static修饰。
   1、可以直接访问外部类的所有成员，包含私有的
   2、可以添加任意访问修饰符（public、protected、默认、private），因为它的地位就是一个成员。
   3、作用域（MemberInnerClass02.java）
        和外部类的其他成员一样，为整个类体
   4、成员内部类---访问--->外部类（比如：属性）【访问方式：直接访问】
   5、外部类----访问------>成员内部类【访问方式：创建成员内部类的对象，再访问】
   6、外部其他类---访问----->成员内部类
   7、如果外部类和内部类的成员重名时，内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用（外部类名.this.成员）去访问。


四、静态内部类的使用 StaticInnerClass01.java
说明：静态内部类是定义在外部类的成员位置，并且有static修饰
1、可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员
2、可以添加任意访问修饰符（public、protectd、默认、private），因为它的地位就是一个成员。
3、作用域：同其他成员，为整个类体
4、静态内部类----访问---->外部类（比如：静态属性）【访问方式：直接访问所有静态成员】
5、外部类---访问----->静态内部类 访问方式：创建对象，再访问。
6、外部其他类--->访问----->静态内部类
7、如果外部类和静态内部类的成员重名时，静态内部类访问的时候，默认遵循就近原则，如果想访问外部类的成员，
则可以使用（外部类名.成员）去访问。